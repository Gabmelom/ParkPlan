@page "/ParkingSearch"
@inject IJSRuntime JSRuntime
@inject NavigationManager Nav

<div style="display: flex;">
    <MudText Typo="Typo.h5" Color="Color.Primary">Find Parking</MudText>

    @* Search bar *@
    <MudTextField style="width: 400px;margin-right: 0;margin-left: auto;" @bind-Value="SearchTerm"  @onkeydown="OnKeyDown" Placeholder="Search" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="Search"></MudTextField>
</div>

<div style="display: flex;margin-top:10px">
    @if (SelectedParking != null)
    {
        <div style="width:38%;min-width:fit-content;">
            @* Updates to show selected parking area *@
            <MudText Typo="Typo.subtitle1" Color="Color.Primary">Showing lots for "@SelectedParking"</MudText>

            @* The cards would be updated with the selected parking area, but are hardcoded in this prototype *@
            <MudCard @onclick="SelectLot" Class="rounded-xl mud-theme-secondary cursor-pointer" Style="max-height:110px;margin-right:10px;">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudIconButton @onclick="SelectLot" Style="@($"color:{Colors.Shades.White}; background:#008080;")" Icon="@Icons.Material.Filled.LocationOn" Size="Size.Large"/>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Color="Color.Dark">Lot B - 40 Spots Available</MudText>
                        <MudText Color="Color.Dark" Typo="Typo.body2">Monday - Friday</MudText>
                        <MudText Color="Color.Dark" Typo="Typo.body2">8:00 AM - 8:00 PM</MudText>
                        <MudText Color="Color.Dark" Typo="Typo.body2">$5/hour</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>

            <MudCard @onclick="SelectLot" Class="rounded-xl mud-theme-secondary cursor-pointer" Style="max-height:110px;margin-right:10px;margin-top:10px;">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudIconButton @onclick="SelectLot" Style="@($"color:{Colors.Shades.White}; background:#008080;")" Icon="@Icons.Material.Filled.LocationOn" Size="Size.Large"/>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Color="Color.Dark">Lot C - 40 Spots Available</MudText>
                        <MudText Color="Color.Dark" Typo="Typo.body2">Monday - Friday</MudText>
                        <MudText Color="Color.Dark" Typo="Typo.body2">8:00 AM - 8:00 PM</MudText>
                        <MudText Color="Color.Dark" Typo="Typo.body2">$8/hour</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>

            @* This card is disabled because the lot has no spots *@
            <MudCard Class="rounded-xl" Style="@($"background:{Colors.Grey.Lighten1};max-height:110px;margin-right:10px;margin-top:10px;border-radius=90px")">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudIconButton Class="cursor-default" Style="@($"color:{Colors.Shades.White}; background:{Colors.Grey.Darken2};")" Icon="@Icons.Material.Filled.LocationOn" Size="Size.Large"/>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText>Lot A - 0 Spots Available</MudText>
                        <MudText Typo="Typo.body2">Monday - Friday</MudText>
                        <MudText Typo="Typo.body2">8:00 AM - 8:00 PM</MudText>
                        <MudText Typo="Typo.body2">$5/hour</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>
        </div>
    }


    <div id="map" style="height:550px;width:100%;"> </div>
</div>



@code {
    private static ParkingSearch? _parkingSearch;

    public ParkingSearch()
    {
        _parkingSearch = this;
    }

    public string? SearchTerm { get; set; }

    public static string? SelectedParking { get; set; }

    protected override async Task OnAfterRenderAsync ( bool firstRender ) 
    { 
        if (firstRender) 
        { 
            await JSRuntime.InvokeVoidAsync("initialize", null); 
        } 
    }

    @* Recenters the map to the destination *@
    private async Task Search()
    {
        await JSRuntime.InvokeVoidAsync("updateLocation", null);
        SearchTerm = "";
    }

    @* Link to the ReservationDetails page *@
    private void SelectLot()
    {
         Nav.NavigateTo("/ReservationDetails");
    }

    [JSInvokable]
    @* Update the selected parking lot. This is called by parkingmap.js *@
    public static Task SelectParkingAsync(string name)
    {
        SelectedParking = name;
        _parkingSearch?.StateHasChanged();
        return Task.CompletedTask;
    }

    @* Make a search when the enter key is pressed *@
    private async Task OnKeyDown(KeyboardEventArgs args) 
    {
        if (args.Key=="Enter") 
        {
            await Search();
        }
    }
}