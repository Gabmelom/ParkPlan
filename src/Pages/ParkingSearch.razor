@page "/ParkingSearch"
@inject IJSRuntime JSRuntime
@inject NavigationManager Nav

<div style="display: flex;">
    <MudText Typo="Typo.h5" Color="Color.Primary">Find Parking</MudText>
    <MudTextField style="width: 400px;margin-right: 0px;margin-left: auto;" @bind-Value="SearchTerm" Placeholder="Search" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="Search"></MudTextField>
</div>

<div style="display: flex;margin-top:10px">
    @if (SelectedParking != null)
    {
        <div style="width:38%">
            <MudText Typo="Typo.subtitle1" Color="Color.Primary">Showing lots for "@SelectedParking"</MudText>

            <MudCard Class="rounded-xl mud-theme-primary" Style="max-height:110px;margin-right:10px;">
                <MudCardHeader>
                    <CardHeaderActions>
                        <MudIconButton @onclick="SelectLot" Style="@($"color:{Colors.Shades.White}; background:{Colors.Teal.Darken3};margin-top:16px;")" Icon="@Icons.Material.Filled.LocationOn" Size="Size.Large" Color="Color.Secondary"/>
                    </CardHeaderActions>
                    <CardHeaderContent>
                        <MudText>Lot B - 40 Spots Available</MudText>
                        <MudText Typo="Typo.body2">Monday - Friday</MudText>
                        <MudText Typo="Typo.body2">8:00 AM - 8:00 PM</MudText>
                        <MudText Typo="Typo.body2">$5/hour</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>

            <MudCard Class="rounded-xl mud-theme-primary" Style="max-height:110px;margin-right:10px;margin-top:10px;border-radius=90px">
                <MudCardHeader>
                    <CardHeaderActions>
                        <MudIconButton @onclick="SelectLot" Style="@($"color:{Colors.Shades.White}; background:{Colors.Teal.Darken3};margin-top:16px;")" Icon="@Icons.Material.Filled.LocationOn" Size="Size.Large" Color="Color.Secondary"/>
                    </CardHeaderActions>
                    <CardHeaderContent>
                        <MudText>Lot C - 40 Spots Available</MudText>
                        <MudText Typo="Typo.body2">Monday - Friday</MudText>
                        <MudText Typo="Typo.body2">8:00 AM - 8:00 PM</MudText>
                        <MudText Typo="Typo.body2">$8/hour</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>

            <MudCard Class="rounded-xl" Style="@($"background:{Colors.Grey.Lighten1};max-height:110px;margin-right:10px;margin-top:10px;border-radius=90px")">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>Lot A - 0 Spots Available</MudText>
                        <MudText Typo="Typo.body2">Monday - Friday</MudText>
                        <MudText Typo="Typo.body2">8:00 AM - 8:00 PM</MudText>
                        <MudText Typo="Typo.body2">$5/hour</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>
        </div>
    }

    <div id="map" style="height:550px;width:100%;"> </div>
</div>



@code {
    private static ParkingSearch? _parkingSearch;

    public ParkingSearch()
    {
        _parkingSearch = this;
    }

    public string? SearchTerm { get; set; }

    public static string? SelectedParking { get; set; }

    protected override async Task OnAfterRenderAsync ( bool firstRender ) 
    { 
        if (firstRender) 
        { 
            await JSRuntime.InvokeVoidAsync("initialize", null); 
        } 
    }

    void Search()
    {
        SearchTerm = "";
    }

    void SelectLot()
    {
         Nav.NavigateTo("/ReservationDetails");
    }

    [JSInvokable]
    public static Task SelectParkingAsync(string name)
    {
        SelectedParking = name;
        _parkingSearch?.StateHasChanged();
        return Task.CompletedTask;
    }
}