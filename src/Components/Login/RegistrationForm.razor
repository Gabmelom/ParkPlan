@using System.ComponentModel.DataAnnotations

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="First name" HelperText="Max. 8 characters"
                              @bind-Value="_model.Username" For="@(() => _model.Username)"/>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="_model.Email" For="@(() => _model.Email)"/>
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="_model.Password" For="@(() => _model.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Confirm Password" HelperText="Repeat the password" Class="mt-3"
                              @bind-Value="_model.ConfirmPassword" For="@(() => _model.ConfirmPassword)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>
</EditForm>
@code {
    RegisterAccountForm _model = new RegisterAccountForm();
    bool _success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string? Username { get; set; }

        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string? ConfirmPassword { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        _success = true;
        StateHasChanged();
    }

}